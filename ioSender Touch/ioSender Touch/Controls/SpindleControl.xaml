<UserControl x:Class="ioSenderTouch.Controls.SpindleControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:controls="clr-namespace:ioSenderTouch.Controls"
             mc:Ignorable="d"
             x:Name="root" d:DesignWidth="270">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <controls:LogicalNotConverter x:Key="LogicalNotConverter" />
            <controls:SpindleCCWStateConvertor x:Key="SpindleCCWStateConvertor" />
            <controls:SpindleCWStateConvertor x:Key="SpindleCWStateConvertor" />
            <controls:SpindleOffStateConvertor x:Key="SpindleOffStateConvertor" />

            
                <Style x:Key="FocusVisual">
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
                <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
                <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
                <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
                <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
                <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
                <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
                <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
                <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

                <Style TargetType="{x:Type ToggleButton}">
                    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                    <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Padding" Value="1"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource SecondaryHueMidBrush}" SnapsToDevicePixels="true">
                                    <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Button.IsDefaulted" Value="true">
                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="true">
                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource SecondaryHueLightBrush}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Opacity" TargetName="border" Value="0.7"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            

        </ResourceDictionary>
    </UserControl.Resources>

    <GroupBox x:Uid="grp_spindle" x:Name="grpSpindle" Header="Spindle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  Height="Auto" Width="Auto">
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  Height="Auto">
            <Grid.RowDefinitions>
                <RowDefinition Height="40"/>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="40"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid Grid.Row="0" VerticalAlignment="Stretch" Height="Auto">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                </Grid.ColumnDefinitions>


                <Button x:Uid="lbl_cw" Grid.Row="0" Grid.Column="0" x:Name="rbSpindleCW" Content="CW" BorderThickness="2" 
                        BorderBrush="{Binding SpindleState, Converter={StaticResource SpindleCWStateConvertor}}" 
                        HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="Auto"  Margin="0,2,2,2" Click="rbSpindle_Click"/>
                <Button x:Uid="lbl_ccw" Grid.Row="0" Grid.Column="1" x:Name="rbSpindleCCW" Content="CCW" BorderThickness="2"
                        BorderBrush="{Binding SpindleState, Converter={StaticResource SpindleCCWStateConvertor}}" 
                        HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="Auto"  Margin="2,2,0,2" Click="rbSpindle_Click"/>
            </Grid>
            <Button x:Uid="lbl_off" Grid.Row="1"  x:Name="rbSpindleOff" BorderThickness="2" BorderBrush="{Binding SpindleState, Converter={StaticResource SpindleOffStateConvertor}}" 
                    Content="Off"  Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="35" Margin="0,5,2,2" Click="rbSpindle_Click"/>
            <StackPanel  Grid.Row="2" Orientation="Horizontal" Margin="0,5,0,0" >
                <Label x:Uid="lbl_rpm" x:Name="lblRPM" Content="RPM" HorizontalContentAlignment="Right" VerticalAlignment="Center" Height="28" Width="40"/>
                <controls:NumericTextBox x:Name="cvRPM" Value="{Binding RPM, Mode=TwoWay}" MinWidth="90" VerticalContentAlignment="Center"
                                      IsEnabled="{Binding IsJobRunning, Converter={StaticResource LogicalNotConverter}}"
                                          Format="####0" HorizontalAlignment="Left" TextWrapping="NoWrap" VerticalAlignment="Center"/>
                <TextBlock FontSize="16"  Margin="5,0,0,0"  Height="22" TextAlignment="Left"  MinWidth="100" Text= "{Binding ActualRPM, StringFormat={}RPM:{0}}" ></TextBlock>
            </StackPanel>
            <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Center">
                <Button  Height="35" Width="100" Margin="0,5,0,0" HorizontalAlignment="Center" Content="Set RPM"  Click="ButtonBase_OnClick"></Button>
            </StackPanel>
           
            <Grid Grid.Row="4" Width="Auto" Height="50" Margin="10,8,0,0" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Button Grid.Column="0"  Tag="Plus" Name ="IncreaseSpindle" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" Margin="0,0,10,0" 
                        Command="{ Binding SpindleOverRide}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                    <materialDesign:PackIcon  Height="30" Width="30" Kind="Plus" />
                </Button>
                <Button Grid.Column="1" Tag="Minus" Name ="DecreaseSpindle" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" Margin="0,0,10,0" 
                        Command="{ Binding SpindleOverRide}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                    <materialDesign:PackIcon Height="30" Width="30" Kind="MinusThick" />
                </Button>
                <Button Grid.Column="2" Name="Reset" Width="55" Height="Auto" HorizontalAlignment="Stretch"  Margin="0,0,10,0"
                        Command="{ Binding SpindleOverRideReset}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}" >
                    <materialDesign:PackIcon Height="25" Width="25" Kind="Cached" />
                </Button>
            </Grid>
            <StackPanel Orientation="Horizontal" Grid.Row="5" Margin="10,7,0,0">
                <RadioButton Height="38" Width="60" Name="OverRide1" Content="X1" Command="{Binding OverRidePercentCommand}" CommandParameter="1" GroupName="ToggleGroup" Style="{StaticResource {x:Type ToggleButton}}" IsChecked="True"/>
                <RadioButton Height="38" Width="60" Name="OverRide10" Content="X10" Command="{Binding OverRidePercentCommand}" CommandParameter="10"  GroupName="ToggleGroup" Style="{StaticResource {x:Type ToggleButton}}"/>
                <Label x:Uid="lbl_rpm" x:Name="lblRPMOverridePrecent" Content="RPM %" HorizontalContentAlignment="Right" VerticalAlignment="Center" Height="28" />
                <Label  x:Name="lblRPMOverride" Content="{Binding RPMOverride}" HorizontalContentAlignment="Left" VerticalAlignment="Center" Height="28" Width="40"/>
            </StackPanel>
        </Grid>
    </GroupBox>
</UserControl>
